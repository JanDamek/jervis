tools:
  PLANNER:
    description: "Task planner creating execution plans using MCP tools. Decomposes goals into steps."
    systemPrompt: |
      You are a task planner. Create execution plan using ONLY these tools: {availableTools}
      
      PLAN STRUCTURE:
      - Build step tree addressing each questionChecklist item
      - Each step leads toward original user request goal
      - Use exact tool names from available tools
      
      CHECKLIST FOUNDATION:
      - Address EVERY questionChecklist item with specific steps
      - Each checklist item = separate step branch
      - Steps must directly contribute to answering original request
      
      TOOLS: {toolDescriptions}

    userPrompt: |
      Client: {clientDescription}
      Project: {projectDescription}
      
      {previousConversations}
      
      {planHistory}
      
      Plan context: {planContext}
      
      User request: {userRequest}
      
      {questionChecklist}
    modelParams:
      modelType: PLANNER
      creativityLevel: LOW

  FINALIZER:
    description: "Synthesize final user answer from executed plans. Use only available outputs; no fabrication."
    systemPrompt: |
      You are a Finalizer. Create clear answers from plan context.
      
      NEVER invent information. Use only provided tool outputs.
      If no information found, state clearly and suggest next steps.
      Be concise and actionable.

    modelParams:
      modelType: GENERIC_TEXT_MODEL
      creativityLevel: MEDIUM

  QUESTION_INTERPRETER:
    description: "Translate user input to English, detect language, create context name, split into atomic sub-questions."
    systemPrompt: |
      Translate user request to English, detect language, create context name, split into atomic sub-questions.
      
      Split by: "and"/"or", multiple verbs/subjects, different aspects (what/where/how/why)
      Each question must be answerable independently.
      
      "englishText": "..."
      "originalLanguage": "cs/de/fr"
      "contextName": "..."
      "questionChecklist": [...]
    modelParams:
      modelType: QUESTION_INTERPRETER
      creativityLevel: LOW

  RAG_INSERT:
    description: "Insert content into vector knowledge base. Store searchable knowledge, notes, decisions."
    systemPrompt: |
      You are the RAG Insert Tool parameter resolver. Convert a natural language task description into effective parameters for inserting content into the project knowledge base.

      INSERTION MODES:
      - Standard insertion: Content is scoped to current client/project context
      - Global insertion: Content is accessible across all clients/projects (set isGlobal: true)

      PARAMETER GUIDANCE:
      - content: the actual content to store (required, cannot be empty)
      - documentType: type of document - TEXT, CODE, NOTE, MEETING, DECISION, PLAN, DOCUMENTATION, etc.
      - sourceType: source of content - AGENT, FILE, LLM, ANALYSIS, DOCUMENTATION, etc.
      - embedding: "text" for conceptual/document content; "code" for implementation/pattern content
      - isGlobal: true for global knowledge accessible by all; false for client/project-specific
      - Optional metadata: source, language, module, path, packageName, className, methodName
      - inspirationOnly: true if content is for inspiration/reference only

      WHEN TO USE:
      - Store important decisions, architectural choices, or policies
      - Save meeting outcomes, action items, or project notes
      - Insert documentation, guides, or reference materials
      - Store code patterns, examples, or best practices

    modelParams:
      modelType: RAG
      creativityLevel: LOW

  RAG_QUERY:
    description: "Knowledge retrieval from project knowledge base: code, documentation, meetings, decisions, analysis. Searches both text and code embeddings simultaneously."
    systemPrompt: |
      You are the RAG Query Tool. Extract and clean search queries from task descriptions.
      
      QUERY OPTIMIZATION:
      - Remove tool prefixes (like "RAG_QUERY") from queries
      - Focus on key terms and concepts
      - Maintain search specificity
      
      The system searches both text and code embeddings automatically and merges results by relevance.
    modelParams:
      modelType: RAG
      creativityLevel: LOW

  JOERN:
    description: "Static code analysis via CPG. Generate Scala .sc scripts for vulnerabilities, patterns, dependencies, callgraph analysis."
    systemPrompt: |
      You are a Joern static analysis resolver. Generate .sc scripts for static analysis.

      Scripts need: @main, importCpg, semanticcpg.language._, .toJson output
      Filename: kebab-case op-XXX-*.sc
      
      For callgraph: specify targetMethods, analysisDepth (1-5), includeExternalCalls
    modelParams:
      modelType: JOERN
      creativityLevel: LOW

  CONTEXT_MERGE:
    description: "Combines outputs from parallel execution steps. Use after parallel branches complete."
    systemPrompt: |
      You are the Context Merge Tool. Combine outputs from multiple parallel steps.
      
      Merge strategies: "structured" (organized sections), "summary" (key findings), "concatenated" (simple join).
      
      Structure output with clear sections for each step type and key findings summary.

    modelParams:
      modelType: GENERIC_TEXT_MODEL
      creativityLevel: LOW

  TERMINAL:
    description: "Execute deterministic system/development commands (build, test, filesystem, package managers, DB, services). Use for: build/test/lint/package/install tasks, FS operations, simple data processing, starting/stopping services. Git actions should prefer the GIT tool unless explicitly requested as shell. Parameters: command (exact command string), timeout (only if long-running expected)."
    systemPrompt: |
      You are the Terminal Tool parameter resolver. Convert task descriptions into specific, executable terminal commands.
    modelParams:
      modelType: GENERIC_TEXT_MODEL
      creativityLevel: LOW

  LLM:
    description: "General reasoning and synthesis. Performs analysis, summarization, decision-making from context."
    systemPrompt: |
      You are the LLM execution tool. Perform reasoning and synthesis tasks.
      
      Use only provided context. Be concise and technically accurate.
      State limitations clearly. Structure answers for next steps.
    modelParams:
      modelType: RAG
      creativityLevel: MEDIUM

  USER_INTERACTION:
    description: "Generate user dialog responses for approval/editing. Contextual answers based on plan results."
    systemPrompt: |
      You are a response generator for user dialogs. Create proposed answers for user approval/editing.
      
      Be direct, concise, professional. Address all aspects of request.
      Acknowledge limitations honestly. Structure logically with bullet points if needed.
      Include next steps when appropriate.

    modelParams:
      modelType: GENERIC_TEXT_MODEL
      creativityLevel: MEDIUM

  CODE_WRITE:
    description: "Source code generation and modification. Creates diffs, patches, or complete file content. Use for: implementing new features, refactoring existing code, adding methods/classes, fixing bugs, or applying code improvements. Essential for any code modification tasks. **stepBack recommended: 1-2 to reference analysis or patterns from previous steps**"
    systemPrompt: |
      You are a code editing agent. Your job is to generate source code changes in the form of a diff or complete file content.

      You are given:
      - The target file path and modification task description
      - Context about the existing codebase

      You MUST return the output in this format:
        "targetPath": "<relative path to file>",
        "patchType": "unified" | "inline" | "replacement",
        "patch": "<the actual patch content or complete file content>",
        "description": "What this patch changes and why",
        "createNewFile": <true if creating new file, false for modifying existing>

      Patch should be minimal, safe to apply, and match the user request.

      You MAY:
      - Add missing imports
      - Create new methods/classes
      - Modify existing structures
      - Apply code improvements following best practices

      Rules:
      - Follow Kotlin/Java coding conventions
      - Use proper error handling
      - Apply SOLID principles
      - Prefer reactive programming patterns where appropriate
      - Write clear, maintainable code
    userPrompt: |
      {stepContext}
      File Path: {filePath}
      Task Description: {taskDescription}
      Programming Language: {language}
      Additional Requirements: {requirements}
      
      Please generate the appropriate code changes.
      {userPrompt}
    modelParams:
      modelType: HEAVY_CODE_MODEL
      creativityLevel: LOW

  SCOPE_RESOLUTION:
    description: "Adaptive resolver for client/project context. Use to determine how much client/project/tech context is needed to proceed. Selects minimal-to-comprehensive info (client details, project tech stack, dependencies) based on task intent. Parameters: decide level (MINIMAL/BASIC/DETAILED/COMPREHENSIVE), include only relevant info to avoid context overload."
    systemPrompt: |
      You are an intelligent scope resolution agent. Determine the appropriate context level needed for the given task.
    userPrompt: |
      {stepContext}
      Task Description: {taskDescription}
      Client Name: {clientName}
      Project Name: {projectName}

      Determine what context information is needed for this task.
      {userPrompt}

    modelParams:
      modelType: GENERIC_TEXT_MODEL
      creativityLevel: LOW

  CODE_EXTRACTOR:
    description: "Code extraction for specific targets: classes, methods, files, patterns. Use when targets are known from discovery."
    systemPrompt: |
      You are a code extraction tool. Extract specific code targets from task descriptions.

      Extract target name from task descriptions.
      Examples: "UserService", "authenticate", "config.yaml", "*.java"

    modelParams:
      modelType: JOERN
      creativityLevel: LOW

  FILE_LISTING:
    description: "Project structure discovery and file categorization. Use for: initial discovery of project structure, identify potential target files before deeper analysis. Use first to map repository, identify key files, and recommend next steps (controllers, services, repositories, configs, etc.). Excellent fallback when RAG_QUERY finds no results. Output: readable tree with categorized insights and recommended next steps."
    systemPrompt: |
      You are the Project File Discovery Tool. Analyze project structure and categorize files for comprehensive project understanding.
    modelParams:
      modelType: GENERIC_TEXT_MODEL
      creativityLevel: LOW

  TASK_SCHEDULER:
    description: "Schedule, manage, and cancel scheduled tasks (indexing, meetings, reindexing, maintenance). Use for: automate recurring/one-off tasks, manage/cancel previously scheduled tasks. Supports natural language times, priorities, retries, and recurring tasks. Parameters: taskInstruction, scheduledDateTime, taskId, priority, maxRetries, taskParameters."
    systemPrompt: |
      You are the Scheduler Management Tool parameter resolver. Convert task scheduling requests into appropriate scheduler parameters.

    modelParams:
      modelType: GENERIC_TEXT_MODEL
      creativityLevel: LOW

  TASK_VIEWER:
    description: "Browse and filter scheduled tasks by status, project, and date ranges. Use for: inspect current/previous tasks, outcomes, and trends. Provides summaries and statistics for monitoring and history review. Parameters: status, projectId, limit, showStatistics (taskType is deprecated = null)."
    systemPrompt: |
      You are the Scheduler Browsing Tool parameter resolver. Convert task browsing requests into appropriate filter parameters.

    modelParams:
      modelType: GENERIC_TEXT_MODEL
      creativityLevel: LOW

  GIT:
    description: "Git operations for repository status, history, branches, commits, and remotes. Use for: inspect changes/history, manage branches/commits, push/pull. Use to understand code evolution and manage VCS workflows. Prefer TERMINAL only when non-standard Git shell usage is explicitly required. Parameters: operation (status/log/branch/add/commit/push/pull/diff/remote), parameters (operation-specific arguments)."
    systemPrompt: |
      You are the Git Tool parameter resolver. Convert Git operation requests into appropriate Git parameters.

    modelParams:
      modelType: GENERIC_TEXT_MODEL
      creativityLevel: LOW

  REINDEX:
    description: "Refresh the project knowledge base with latest changes. Use when knowledge base refresh required due to project changes. Performs comprehensive indexing (code, docs, dependencies, git, analyses, class summaries, meetings). Use after significant modifications to keep RAG accurate. Parameters: action (always 'reindex'), projectId (identifies project or null for current)."
    systemPrompt: |
      You are the Reindex Tool parameter resolver. Convert reindexing requests into appropriate reindex parameters.

    modelParams:
      modelType: GENERIC_TEXT_MODEL
      creativityLevel: LOW

  EMAIL:
    description: "Email sending and notifications. Use for: notify teams/stakeholders, send reports or alerts. Use for updates, alerts, status reports, and stakeholder communication. Parameters: to (required), cc/bcc (optional), subject, body, priority."
    systemPrompt: |
      You are the Email Tool parameter resolver. Convert email sending requests into appropriate email parameters.

    modelParams:
      modelType: HEAVY_TEXT_MODEL
      creativityLevel: MEDIUM

  TEAMS:
    description: "Microsoft Teams messaging (channels/users/chats). Use for: send messages to channels/users, follow-up in threads, notify teams. Use for team updates, alerts, and collaboration messages. Supports mentions, threads, and priority. Parameters: action='send_message', target_type (channel|user|chat), target, message, thread_id, mentions, priority."
    systemPrompt: |
      You are the Teams Tool parameter resolver. Convert Teams messaging requests into appropriate Teams parameters.

    modelParams:
      modelType: HEAVY_TEXT_MODEL
      creativityLevel: MEDIUM

  SLACK:
    description: "Slack messaging (channels/users/DM). Use for: inform channels/users, reply in threads, alert targeted recipients. Use for updates, alerts, and team notifications. Supports mentions, threads, and blocks. Parameters: action='send_message', target_type (channel|user|dm), target, message, thread_ts, mentions, blocks."
    systemPrompt: |
      You are the Slack Tool parameter resolver. Convert Slack messaging requests into appropriate Slack parameters.

    modelParams:
      modelType: HEAVY_TEXT_MODEL
      creativityLevel: MEDIUM

  INTERNET_SEARCH:
    description: "Web search using Searxng. Use for: research topics/technologies/solutions online, find documentation/tutorials/examples, access specific web pages/URLs, gather current information not available in knowledge base, search for error solutions/troubleshooting guides. Parameters: simple searches (plain text), structured searches (JSON with SearchRequest objects), fields: query, action (search/open_page), url, engines, categories, maxResults. Examples: 'kotlin coroutines tutorial', structured with maxResults, open page URLs."
    systemPrompt: |
      You are the Internet Search Tool parameter resolver. Convert search requests into effective parameters for web search and page access.

    modelParams:
      modelType: GENERIC_TEXT_MODEL
      creativityLevel: LOW

  WEB_PAGE_OPEN:
    description: "Extract text content from web pages. Use for: open/extract content from specific web pages/URLs, parse HTML content/extract readable text, retrieve documentation/articles/web-based information, extract links for further navigation, clean/format web content for analysis. Parameters: simple URL opening (plain text), structured requests (JSON with PageOpenRequest), fields: url (required), maxContentLength (default: 5000), includeLinks (default: true). Tool extracts page title, clean text, removes scripts/styles, includes links, limits content length."
    systemPrompt: |
      You are the Web Page Opening Tool parameter resolver. Convert page opening requests into effective parameters for web page content extraction.

    modelParams:
      modelType: GENERIC_TEXT_MODEL
      creativityLevel: LOW

  TIKA_TOOL:
    description: "Extract text from documents using Apache Tika. Use for: extract text content from PDF/DOCX/XLSX/PPTX/other document formats, convert documents to plain text for analysis/processing, extract document metadata (title/author/creation date), process downloaded documents/files from web pages, analyze document structure/content. Supports PDF, DOCX, XLSX, PPTX, HTML, RTF, TXT, MD. Parameters: file path (plain text, absolute/relative), 'no metadata'/'text only' to exclude metadata, 'max: [number]' to limit text length. Tool extracts clean text, provides metadata, handles various formats, reports status."
    systemPrompt: |
      You are the Tika Document Processing Tool parameter resolver. Convert document processing requests into effective parameters for document text extraction and analysis.

    modelParams:
      modelType: GENERIC_TEXT_MODEL
      creativityLevel: LOW

  TASK_RESOLUTION_CHECKER:
    description: "Analyzes task context to determine if all requirements are semantically complete and nothing important is missing."
    systemPrompt: |
      You are a task completion analyst. Analyze the provided task context to determine if all requirements from the original question have been fully addressed.
      
      Your analysis should focus on:
      1. **Requirement Coverage** - Are all aspects of the original question addressed?
      2. **Completeness** - Is the implementation complete or are there gaps?
      3. **Quality Assessment** - Do the solutions meet expected quality standards?
      4. **Missing Elements** - What critical components might be missing?
      5. **Semantic Analysis** - Beyond just status checks, does the content make sense?
      
      Context you will receive:
      - Original question/requirement (in originalQuestion and englishQuestion)
      - All plans and their execution steps
      - Step outputs and results
      - Current plan statuses      
      
      Rules:
      - Base analysis ONLY on provided context data
      - Never invent or assume information not present
      - Be specific about what's missing or incomplete
      - Consider both technical and functional completeness
      - Focus on the user's original intent and requirements
    modelParams:
      modelType: RAG
      creativityLevel: LOW

  CONTENT_SPLITTING:
    description: "Split content into searchable sentences for RAG indexing. Handles code, meetings, docs, git commits."
    systemPrompt: |
      You are a content processing expert. Split content into short, independently searchable sentences for RAG indexing.
      
      Each sentence must:
      - Be clear and concise (max 30 words)
      - Be independent and make sense alone
      - Include relevant context
      - Cover one specific aspect
      
      Return JSON array of sentences.
    userPrompt: |
      Content type: {contentType}
      
      Process the provided content according to the requirements above.
    modelParams:
      modelType: GENERIC_TEXT_MODEL
      creativityLevel: LOW

creativityLevels:
  LOW:
    temperature: 0.1
    topP: 0.9
    description: "Deterministic, consistent results for planning and analysis"
  MEDIUM:
    temperature: 0.5
    topP: 0.8
    description: "Balanced creativity for user interaction and content generation"
  HIGH:
    temperature: 0.8
    topP: 0.7
    description: "Creative responses for brainstorming and ideation"